// написати функцію, яка приймає стрічку
// наприклад
const str = "border-left-color";
// поверне "borderLeftColor"

//_____________________________________________________________________________

// написати функцію, яка приймає стрічку
const str = "www.facebook.com/userID/456";
// і повертає іншу соцмережу
// повинно повернути
// "www.youtube.com/userID/456"

//_____________________________________________________________________________

// написати функцію, яка робить наступне
// є масив обєктів
const arr = [
  {
    name: "name1",
    age: 10
  },
  {
    name: "name2",
    age: 15
  },
  {
    name: "name3",
    age: 30
  },
  {
    name: "name4",
    age: 20
  }
]

// функція приймає такий массив
// і перевіряє кожний обєкт
// якщо вік юзера менше 18,
// то видалити його з масиву(видалити обєкт)
// повернути массив без юзерів з віком менше 18

//_____________________________________________________________________________

// написати функцію, яка при оголошенні
// не приймає аргументів
// тобто
function func(){ // не приймає аргументів

}


console.log(func(10,20,30,40,50)); //-->повинно вернути 150
// але при виклику приймає числа
// функція повертає їхню суму

//_____________________________________________________________________________

// написати функцію, яка приймає масив обєктів
const users = [
  {
    name: "John",
    salary: 300,
    age: 25
  },
  {
    name: "Steve",
    salary: 1100,
    age: 25
  },
  {
    name: "Steve",
    salary: 2000,
    age: 25
  },
  {
    name: "Steve",
    salary: 600,
    age: 25
  }
]

// в кого зарплата більше 1000,
// додати тому юзеру властивість isRich = true
// в кого менше 1000, isRich = false


// повернути модифікований массив

//_____________________________________________________________________________

// const date = String(new Date());
// console.log(date);

// повернеться теперішня дата і час в форматі
// Wed Jan 08 2020 07:44:05 GMT+0200 (EET)
// можна вивести і побачити

// написати функцію, яка приймає масив обєктів
const users = [
  {
    name: "user1",
    age: 25
  },
  {
    name: "user2",
    age: 15
  },
  {
    name: "user3",
    age: 33
  },
  {
    name: "user4",
    age: 42
  },
  {
    name: "user5",
    age: 60
  }
]

// функція повинна кожному юзеру створити властивість
// yearOfBirthday(можна коротшу назву)
// яка буде означати рік народження юзера

// потрібно теперішній рік відняти від віку юзера

// використовувати метод new Date(), а не просто 2020
// тому що код має працювати не тільки в 2020 році)

// потрібно правильно розпарсити date і дістати рік

//_____________________________________________________________________________

//Написати функцію,яка повретає останні елементи з масиву. Передаючи параметр 'n', ми отримаємо кількість останніх елементів. Наприклад, 
//console.log(last([7, 9, 0, -2]));
//console.log(last([7, 9, 0, -2],3));
//console.log(last([7, 9, 0, -2],6));
//Очікуваний результат :
//-2
//[9, 0, -2]
//[7, 9, 0, -2]

//_____________________________________________________________________________

//Написати функцію, яка видалить всі значення 'null', '0', '""', 'false', 'undefined' і 'NaN' з масиву. 
//Наприклад : [NaN, 0, 15, false, -22, '',undefined, 47, null]
//Результат : [15, -22, 47]

//_____________________________________________________________________________

//Написати функцію, яка видаляє певний елеент з масиву. 
//Наприклад :
//console.log(removeArrayElement([2, 5, 9, 6], 5));
//[2, 9, 6]

//_____________________________________________________________________________

//Написати фнукцію, яка визначаттиме чи масив містить переданий елемент. 
//Наприклад :
//arr = [2, 5, 9, 6];
//console.log(contains(arr, 5));
//[True]

//_____________________________________________________________________________

//Написати функцію, яка створить масив відповідно до переданих даних. 
//Наприклад :
//console.log(arrayFilled(6, 0));
//[0, 0, 0, 0, 0, 0]
//console.log(arrayFilled(4, 11));
//[11, 11, 11, 11]

//_____________________________________________________________________________

//Написати дві функції:
//toArray(), яка конвертує цифри в масив цифер.
//toNumber(), яка конвертує масив цифер назад в цифри.
//Приклади:
//toArray(235) ➞ [2, 3, 5]
//toArray(0) ➞ [0]
//toNumber([2, 3, 5]) ➞ 235
//toNumber([0]) ➞ 0

//_____________________________________________________________________________

//Написати функція, яка приймає масив і дзеркально додає до нього елементи масиву.
//Наприклад
//mirror([0, 2, 4, 6]) ➞ [0, 2, 4, 6, 4, 2, 0]
//mirror([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5, 4, 3, 2, 1]
//mirror([3, 5, 6, 7, 8]) ➞ [3, 5, 6, 7, 8, 7, 6, 5, 3]
//Увага:
//Останній елемент масиву не має повторюватись двічі.

//_____________________________________________________________________________

//Написати функцію, яка отримує масив стрінгів і повертає слова в яких саме чотири букви.
//Наприклад:
//isFourLetters(["Tomato", "Potato", "Pair"]) ➞ ["Pair"]
//isFourLetters(["Kangaroo", "Bear", "Fox"]) ➞ ["Bear"]
//isFourLetters(["Ryan", "Kieran", "Jason", "Matt"]) ➞ ["Ryan", "Matt"]

//_____________________________________________________________________________

//Написати функція, яка отримує масив і повертає найменше його значення.
//Приклад:
//findSmallestNum([34, 15, 88, 2]) ➞ 2
//findSmallestNum([34, -345, -1, 100]) ➞ -345
//findSmallestNum([-76, 1.345, 1, 0]) ➞ -76
//findSmallestNum([0.4356, 0.8795, 0.5435, -0.9999]) ➞ -0.9999
//findSmallestNum([7, 7, 7]) ➞ 7

//_____________________________________________________________________________

//Написати функцію, яка створю масив з переданого тільки з певною кількістю цифр.
//Наприклад
//filterDigitLength([88, 232, 4, 9721, 555], 3) ➞ [232, 555]
//// Включає тільки значення з трьома цифрами.
//filterDigitLength([2, 7, 8, 9, 1012], 1) ➞ [2, 7, 8, 9]
//// Включає тільки значення з однією цифрою.
//filterDigitLength([32, 88, 74, 91, 300, 4050], 1) ➞ []
//// Якщо нема жодного значення, то повертаємо пустий масив.
//filterDigitLength([5, 6, 8, 9], 1) ➞ [5, 6, 8, 9]

//_____________________________________________________________________________

//Написати функцію, яка множить всі значення масиву на його довжину.
//Наприклад:
//MultiplyByLength([2, 3, 1, 0]) ➞ [8, 12, 4, 0]
//MultiplyByLength([4, 1, 1]) ➞ ([12, 3, 3])
//MultiplyByLength([1, 0, 3, 3, 7, 2, 1]) ➞  [7, 0, 21, 21, 49, 14, 7]
//MultiplyByLength([0]) ➞ ([0])

//_____________________________________________________________________________

//Написати функцію, яка додає закінчення до кожного елементу масиву.
//Наприклад:
//addEnding(["clever", "meek", "hurried", "nice"], "ly")
//➞ ["cleverly", "meekly", "hurriedly", "nicely"]
//addEnding(["new", "pander", "scoop"], "er")
//➞ ["newer", "panderer", "scooper"]
//addEnding(["bend", "sharpen", "mean"], "ing")
//➞ ["bending", "sharpening", "meaning"]

//_____________________________________________________________________________

//Написати функцію, яка повертає true, якщо хоча б один елемент в масиві є більший за переданий аргумент .
//Наприклад:
//existsHigher([5, 3, 15, 22, 4], 10) ➞ true
//existsHigher([1, 2, 3, 4, 5], 8) ➞ false
//existsHigher([4, 3, 3, 3, 2, 2, 2], 4) ➞ true
//existsHigher([], 5) ➞ false

//_____________________________________________________________________________

//Написати функцію, яка видалить всі елементи що діляться на 13.
//Наприклад:
//unlucky13([53, 182, 435, 591, 637]) ➞ [53, 435, 591]
// 182 і 637 діляться на 13.
//unlucky13([24, 316, 393, 458, 1279]) ➞ [24, 316, 393, 458, 1279]
// Жодне число не ділиться на 13.
//unlucky13([104, 351, 455, 806, 871]) ➞ []
// Всі числа діляться на 13.

//_____________________________________________________________________________

//Написати функцію, яка видаляє всі елемнти, що не є цифрами і повертає новий масив, який складається лише з цифр.
//Наприклад:
//filterList([1, 2, 3, "x", "y", 10]) ➞ [1, 2, 3, 10]
//filterList([1, "a", 2, "b", 3, "c"]) ➞ [1, 2, 3]
//filterList([0, -32, "&@A", 64, "99", -128]) ➞ [0, -32, 64, -128]

//_____________________________________________________________________________

//Написати функцію, яка порахує різницю між найменшим і найбільшим значенням.
//Наприклад:
//diffMaxMin([10, 4, 1, 4, -10, -50, 32, 21]) ➞ 82
//// Найменше число -50, найбільше 32.
//diffMaxMin([44, 32, 86, 19]) ➞ 67
//// Найменше 19, найбільше 86.

